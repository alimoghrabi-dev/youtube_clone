generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String?
  email           String
  password        String
  subscribers     String[]
  subscriptions   String[]
  profilePicture  String?
  bio             String?
  contactEmail    String?

  links           Link[]
  videos          Video[]
  comments        Comment[]

  createdAt       DateTime @default(now())

  @@map("users")
}

model Post {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  userId          String
  image           String? 

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId])
  @@map("posts")
}

model Link {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  url             String

  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  addedAt         DateTime @default(now())
  
  @@index([userId])
  @@map("links")
}

model Video {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  videoUrl        String?
  title           String?
  description     String?
  isPublic        Boolean @default(false)
  thumbnail       String?
  views           Int? @default(0)
  likes           String[]
  dislikes        String[]

  muxData         MuxData?
  comments        String[]

  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("videos")
}

model MuxData {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  assetId         String
  playbackId      String?

  videoId         String @db.ObjectId @unique
  video           Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Comment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  likes           String[]
  dislikes        String[]

  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  videoId         String @db.ObjectId

  createdAt       DateTime @default(now())

  @@map("comments")
}

model Playlist {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  coverImage      String?
  isPublic        Boolean @default(false)

  videos          String[]

  userId          String @db.ObjectId

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("playlists")
}

model Notification {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String

  videoId         String?
  commentId       String?

  createdAt       DateTime @default(now())

  @@map("notifications")
}

model SearchHistory {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  label           String

  createdAt       DateTime @default(now())

  @@map("search_histories")
}